[[plugins]]
# :call dein#update()のあとは :echo dein#get_updates_log()でupdateされた情報を確認すること
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token = $GITHUB_API_TOKEN_FOR_DEIN_VIM
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set background=dark
'''

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
  " uncomment when debugging
  " let g:gutentags_trace = 1
'''

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
  if executable('spec')
    " テストが完了したら通知でお知らせするためnotifyコマンドを使う
    " see https://github.com/ryotatake/dotfiles/blob/master/.config/fish/functions/notify.fish
    let g:test#ruby#rspec#executable = 'notify spec'
  endif
  let g:test#strategy = "dispatch"

  nnoremap [test] <Nop>
  nmap     <Leader>t [test]
  nnoremap [test]t :TestFile<CR>
  nnoremap [test]n :TestNearest<CR>
  nnoremap [test]r :TestLast<CR>
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale']

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['lightline-ale']
hook_add = '''
  set laststatus=2
  set noshowmode

  " https://itchyny.hatenablog.com/entry/20130828/1377653592
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'filename', 'modified' ], [ 'signify' ], [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ] ],
    \ },
    \ 'component_function': {
    \   'readonly': 'LightlineReadonly',
    \   'gitbranch': 'gina#component#repo#branch',
    \   'filename': 'LightlineFilename',
    \   'fileformat': 'LightlineFileformat',
    \   'filetype': 'LightlineFiletype',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \   'signify': 'LightlineSignify'
    \ },
    \ 'component_expand': {
    \   'modified': 'LightlineModified',
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_infos': 'lightline#ale#infos',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \   'modified': 'error',
    \   'linter_checking': 'right',
    \   'linter_infos': 'right',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'right',
    \ }
    \}

  function! LightlineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
    return &ft !~? 'help' && &readonly ? 'x' : ''
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
      \ ('' != my_settings#utils#get_current_relative_path() ? my_settings#utils#get_current_relative_path() : '[No Name]')
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  " ref. :help signify-faq-01
  function! LightlineSignify()
    if exists('*sy#repo#get_stats_decorated')
      return sy#repo#get_stats_decorated()
    else
      return ''
    endif
  endfunction

  autocmd my_vimrc InsertLeave,TextChanged,BufWritePost * call lightline#update()
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
  map _ <Plug>(operator-replace)
'''

# fzfの導入
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  " C-a: select-all, C-q: open files in quickfix
  function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
  endfunction

  let g:fzf_action = {
    \ 'ctrl-q': function('s:build_quickfix_list'),
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }

  let $FZF_DEFAULT_OPTS = $FZF_DEFAULT_OPTS . " --bind ctrl-a:select-all"

  " Ag with preview
  " delimiterを指定してAgでの検索の際にファイル名を除外する
  " http://someneat.hatenablog.jp/entry/2017/04/29/085242
  command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--hidden --ignore-dir .git', fzf#vim#with_preview({'options': '--delimiter : --nth 3..'}), <bang>0)
  " Files with preview
  command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  "Find by filename under current directory
  function! FindByCursorFilename() abort
    let filename = expand("<cfile>")
    call s:fzf_filename_grep(filename)
  endfunction

  function! s:fzf_filename_grep(query) abort
    let query = empty(a:query) ? '^(?=.)' : a:query
    return fzf#run(fzf#wrap(fzf#vim#with_preview({'source': 'ag --hidden --ignore-dir .git -g ' . fzf#shellescape(query), 'options': '--prompt File\>\ '})))
  endfunction

  command! -bang Functions call my_settings#plugins#fzf#functions(<bang>0)
'''

[[plugins]]
repo = 'ryotatake/vim-fzf-menu'
depends  = ['fzf']
hook_add = '''
  let g:fzf_menu_list = [
  \  ["[fzf] Commands",                                "Commands"],
  \  ["[fzf] Find by Filename under cursor",           "call FindByCursorFilename()"],
  \  ["[option] Toggle Paste",                         "set invpaste"],
  \  ['[substitute] Delete Blank Lines',               'v/./d'],
  \  ['[substitute] snake_case to camelCase',          's#_\(\l\)#\u\1#g'],
  \  ['[substitute] snake_case to UpperCamelCase',     's#\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2#g'],
  \  ["[repl] Toggle REPL",                            "REPLToggle"],
  \  ["[dein] Update Vim Plugins",                     "call dein#update()"],
  \  ["[dein] Remove unused Vim Plugins",              "call map(dein#check_clean(), \"delete(v:val, 'rf')\") | call dein#recache_runtimepath()"],
  \  ["[dein] Get Update Logs",                        "call my_settings#plugins#dein#output_update_logs() | call my_settings#plugins#dein#open_log_file()"],
  \  ["[copy] Remote copy current relative file path", "call RemoteCopy(my_settings#utils#get_current_relative_path())"],
  \]

  nmap <Leader>m <Plug>(fzf_menu)
'''

[[plugins]]
repo = 'dag/vim-fish'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  " caw.vimでのコメントアウトの挙動に支障が出るので`- `や`=`に続くコードをrubyとして認識させない
  let g:context_filetype#filetypes = {
  \ 'haml': [
  \   {
  \    'start' : '^:javascript$',
  \    'end' : '^\S',
  \    'filetype' : 'javascript',
  \   },
  \   {
  \    'start' : '^:css$',
  \    'end' : '^\S',
  \    'filetype' : 'css',
  \   },
  \ ],
  \ 'ruby' : [
  \   {
  \     'start' : '<<.*SQL$',
  \     'end' : '^\s*SQL',
  \     'filetype' : 'sql',
  \   }
  \ ],
  \}
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
merged = 0
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  if has('mac')
    let g:previm_open_cmd = 'open -a Google\ Chrome'
  elseif system("uname -r") =~# 'Microsoft' " WSLを使っている場合
    let g:previm_open_cmd = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'
    let g:previm_wsl_mode = 1
  endif
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

[[plugins]]
# 置換される様子を分かりやすくしてくれる
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
  call gina#custom#command#option('log', '--opener', 'vsplit')
  call gina#custom#command#option('commit', '--verbose')
  call gina#custom#action#alias('log', 'show', 'show:right')
  call gina#custom#mapping#nmap(
  \  '/\%(diff\|show\)', '<CR>',
  \  '<Plug>(gina-diff-jump-split)',
  \)
  call gina#custom#mapping#nmap(
  \  'status', '<CR>',
  \  '<Plug>(gina-diff-split)',
  \)
  call gina#custom#mapping#nmap(
  \  'status', '<C-c>',
  \  ':<C-u>Gina commit -v<CR>',
  \)
  call gina#custom#mapping#nmap(
  \  'commit', '<C-c>',
  \  ':<C-u>Gina status<CR>',
  \)

  cabbrev gap Gina!! add --patch
  cabbrev gc  Gina commit -v
  cabbrev gca Gina commit -va
  cabbrev gs  Gina status
  cabbrev gd  Gina diff
  cabbrev gl  Gina log
  cabbrev gbl Gina blame
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  " 編集中は重たくなるのでチェックしない
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_lint_on_insert_leave = 0

  " cf. ~/dotfiles/.textlintrc
  let g:ale_linters = {
  \   'markdown':   ['textlint'],
  \   'text':       ['textlint'],
  \   'javascript': ['eslint'],
  \   'typescript': ['eslint'],
  \}

  let g:ale_fixers = {
  \   'markdown':   ['textlint'],
  \   'text':       ['textlint'],
  \   'javascript': ['eslint'],
  \   'typescript': ['eslint'],
  \}

  let g:ale_sign_error = "✗"
  let g:ale_sign_warning = "!!"
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_set_highlights = 0
'''

[[plugins]]
repo =  'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> K <plug>(lsp-hover)
  endfunction

  autocmd my_vimrc User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
'''

# diagnosticなどのLSPの機能はvim-lspに任せ、lintやformatはaleに任せる
[[plugins]]
repo = 'rhysd/vim-lsp-ale'
depends = ['vim-lsp', 'ale']

[[plugins]]
repo =  'mattn/vim-lsp-settings'
depends = ['vim-lsp']
merged = 0

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  let g:asyncomplete_matchfuzzy = 0
  let g:asyncomplete_min_chars = 1
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp', 'asyncomplete.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
depends = ['asyncomplete.vim']
hook_add = '''
  " バッファを閉じてもそのバッファの内容で補完できるようにする
  let g:asyncomplete_buffer_clear_cache = 0

  autocmd my_vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
  \ 'name': 'buffer',
  \ 'allowlist': ['*'],
  \ 'completor': function('asyncomplete#sources#buffer#completor'),
  \ 'config': {
  \    'max_buffer_size': 5000000,
  \  },
  \}))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = ['asyncomplete.vim']
hook_add = '''
  autocmd my_vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
  \ 'name': 'file',
  \ 'allowlist': ['*'],
  \ 'priority': 10,
  \ 'completor': function('asyncomplete#sources#file#completor')
  \}))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim', 'asyncomplete-lsp.vim']
hook_add = '''
  autocmd my_vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({}))
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if   = '''has('lua')'''
hook_add = '''
  " スニペットファイルのディレクトリを指定
  let s:snippets_dir = expand('~/.vim/snippets')
  let g:neosnippet#snippets_directory = s:snippets_dir
  " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
  call my_settings#mappings#define_cr_for_insert_mode()
  call my_settings#mappings#define_tab_for_insert_mode()
'''

[[plugins]]
repo = 'ryotatake/neosnippet-snippets'
if   = '''has('lua')'''
depends = ['neosnippet.vim']

[[plugins]]
repo =  'thinca/vim-zenspace'

[[plugins]]
repo =  'LeafCage/vimhelpgenerator'

[[plugins]]
repo = 'ryotatake/vim-md-checkbox'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap <Leader>ea <Plug>(EasyAlign)
  nmap <Leader>ea <Plug>(EasyAlign)
'''

[[plugins]]
# 色々な言語のシンタックスハイライト
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'jonsmithers/vim-html-template-literals'
depends = ['vim-polyglot']
hook_add = '''
  let g:htl_css_templates = 1
'''

[[plugins]]
repo = 'kg8m/vim-fzf-tjump'
merged = 0
hook_add = '''
  map g] <Plug>(fzf-tjump)
'''

[[plugins]]
repo = 'qpkorr/vim-renamer'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  let g:ackprg = 'ag --vimgrep'
'''

[[plugins]]
repo = 'joker1007/vim-ruby-heredoc-syntax'

[[plugins]]
repo = 'vim-scripts/moin.vim'

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
  set updatetime=100

  let g:signify_sign_add               = '+'
  let g:signify_sign_delete            = '-'
  let g:signify_sign_delete_first_line = '-'
  let g:signify_sign_change            = 'c'
'''

[[plugins]]
# osyo-manga/vim-preciousとの違い:
  # このプラグインはシンタックスファイルを読み込むだけ。
  # vim-preciousはfiletype自体を変更するのでfiletype特有の設定が有効になる。
repo = 'inkarkat/vim-SyntaxRange'
hook_add = '''
  " ref. https://qiita.com/tmsanrinsha/items/9670628aef3144c7919b
  autocmd my_vimrc BufEnter dein*.toml call my_settings#plugins#syntax_range_dein()
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'
hook_add = '''
  " Before
  " {
  "   :hoge => 'hoge'
  " }
  "
  " After
  " { :hoge => 'hoge' }
  let g:argwrap_padded_braces = '{}'
  nnoremap <Leader>a :ArgWrap<CR>
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_exclude_filetypes = ['startify', 'help']

  autocmd my_vimrc VimEnter,Colorscheme * highlight IndentGuidesEven ctermbg=238
  autocmd my_vimrc VimEnter,Colorscheme * highlight IndentGuidesOdd ctermbg=235
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let g:startify_change_to_dir = 0
  let g:startify_bookmarks = [ {'c': '~/.vimrc'}, {'d': '~/.vim/rc/dein.toml'} ]
  let g:startify_lists = [
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ { 'type': 'files',     'header': ['   MRU']            },
        \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
        \ { 'type': 'commands',  'header': ['   Commands']       },
        \ ]
  function! StartifyEntryFormat()
      return 'nerdfont#find(absolute_path) ." ". entry_path'
  endfunction
'''

[[plugins]]
repo = 'pbrisbin/vim-mkdir'

[[plugins]]
# プロジェクトごとの.local.vimrcを自動で読み込んでくれる
repo = 'thinca/vim-localrc'
hook_add = '''
  let g:localrc_filename = '.local.vimrc'
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden = 1

  augroup my_vimrc
    autocmd FileType fern nmap <buffer> <C-r> <Plug>(fern-action-remove)
    autocmd FileType fern nmap <buffer> <CR>  <Plug>(fern-action-open-or-expand)
    autocmd FileType fern nmap <buffer> l     <Plug>(fern-action-expand)
    autocmd FileType fern nmap <buffer> <TAB> <Plug>(fern-action-mark:toggle)
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
  let g:fern#renderer = "nerdfont"
'''

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my_vimrc
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType startify call glyph_palette#apply()
  augroup END
'''

[[plugins]]
repo = 'mattn/vim-findroot'
hook_add = '''
  let g:findroot_not_for_subdir = 0
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_leader_key = '<Leader>em'
'''
