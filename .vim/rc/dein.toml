[[plugins]]
# :call dein#update()のあとは :echo dein#get_updates_log()でupdateされた情報を確認すること
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token = $GITHUB_API_TOKEN_FOR_DEIN_VIM
'''
hook_done_update = '''
  echom "plugin update completed"
  function! OutputDeinUpdatesLog() abort
    let outputfile = "$HOME/vim_plugin_updates.log"
    execute ":redir! > " . outputfile
    silent! echo dein#get_updates_log()
    silent! echo "hogehogefugafuga"
    redir END
  endfunction

  call OutputDeinUpdatesLog()
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set background=dark
'''

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
  " もっと複雑な管理をしたくなったら kg8m/vim-parallel-auto-ctags を検討
  let g:auto_ctags_set_tags_option = 0 " これを設定しないとvim起動時にエラーする。おそらくプラグインのバグ
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git']
'''

[[plugins]]
repo = 'janko/vim-test'
hook_add = '''
  if executable('spec')
    " テストが完了したら通知でお知らせするためnotifyコマンドを使う
    " see https://github.com/ryotatake/dotfiles/blob/master/.config/fish/functions/notify.fish
    let g:test#ruby#rspec#executable = 'notify spec'
  endif
  let g:test#strategy = "dispatch"
  map <Leader>t :TestFile<CR>
  map <Leader>n :TestNearest<CR>
  map <Leader>r :TestLast<CR>
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends  = ['vim-signify']
hook_add = '''
  set laststatus=2
  set noshowmode

  " https://itchyny.hatenablog.com/entry/20130828/1377653592
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], [ 'signify' ] ]
    \ },
    \ 'component_function': {
    \   'modified': 'LightlineModified',
    \   'readonly': 'LightlineReadonly',
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \   'fileformat': 'LightlineFileformat',
    \   'filetype': 'LightlineFiletype',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \   'signify': 'LightlineSignify'
    \ }
    \}

  function! LightlineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
      \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
      \  &ft == 'unite' ? unite#get_status_string() :
      \  &ft == 'vimshell' ? vimshell#get_status_string() :
      \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
      \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    else
      return ''
    endif
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  " ref. :help signify-faq-01
  function! LightlineSignify()
    return sy#repo#get_stats_decorated()
  endfunction
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  " save時のみチェックする
  let g:ale_lint_on_text_changed = 0
  let g:ale_lint_on_insert_leave = 0

  " cf. ~/dotfiles/.textlintrc
  let g:ale_linters = {
  \   'markdown':   ['textlint'],
  \   'text':       ['textlint'],
  \   'javascript': ['eslint'],
  \}

  let g:ale_fixers = {
  \   'markdown':   ['textlint'],
  \   'text':       ['textlint'],
  \   'javascript': ['eslint'],
  \}

  let g:ale_sign_error = "✗"
  let g:ale_sign_warning = "!!"
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_set_highlights = 0
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'

[[plugins]]
repo     = 'Shougo/deoplete.nvim'
if       = '''has('python3')'''
depends  = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_add = '''
  " Vim起動時にdeopleteを有効にする
  let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
  call deoplete#custom#option({
  \ 'smart_case': v:true,
  \ 'refresh_backspace': v:false,
  \ })
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if   = '''has('lua')'''
hook_add = '''
  " スニペットファイルのディレクトリを指定
  let s:snippets_dir = expand('~/.vim/snippets')
  let g:neosnippet#snippets_directory = s:snippets_dir
  " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
  imap <expr><CR> neosnippet#expandable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-y>" : "\<CR>"
  " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
  imap <expr><TAB> pumvisible() ?
    \ "<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
'''

[[plugins]]
repo = 'ryotatake/neosnippet-snippets'
if   = '''has('lua')'''
depends = ['neosnippet.vim']

# fzfの導入
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'laher/fuzzymenu.vim'
depends = ['fzf.vim']
hook_post_source = '''
  call fuzzymenu#Add('Vim Plugin Update', {'exec': 'call dein#update()'}, {'after': 'echo dein#get_updates_log()'})
  call fuzzymenu#Add('Fold by Indent', {'exec': 'set foldmethod=indent'})
'''

[[plugins]]
repo = 'dag/vim-fish'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
" caw.vimでのコメントアウトの挙動に支障が出るので`- `や`=`に続くコードをrubyとして認識させない
let g:context_filetype#filetypes = {
\ 'haml': [
\   {
\    'start' : '^:javascript$',
\    'end' : '^\S',
\    'filetype' : 'javascript',
\   },
\   {
\    'start' : '^:css$',
\    'end' : '^\S',
\    'filetype' : 'css',
\   },
\ ],
\ 'ruby' : [
\   {
\     'start' : '<<.*SQL$',
\     'end' : '^\s*SQL',
\     'filetype' : 'sql',
\   }
\ ],
\}
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

[[plugins]]
# 置換される様子を分かりやすくしてくれる
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo =  'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo =  'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_diagnostics_float_cursor = 1
'''

[[plugins]]
repo =  'mattn/vim-lsp-settings'
depends = ['vim-lsp']
merged = 0

[[plugins]]
repo =  'thinca/vim-zenspace'

[[plugins]]
repo =  'LeafCage/vimhelpgenerator'

[[plugins]]
repo = 'ryotatake/vim-md-checkbox'

[[plugins]]
repo = 'thinca/vim-qfreplace'
hook_add = '''
  map _ <Plug>(operator-replace)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap <Leader>ea <Plug>(EasyAlign)
  nmap <Leader>ea <Plug>(EasyAlign)
'''

[[plugins]]
# 色々な言語のシンタックスハイライト
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'jonsmithers/vim-html-template-literals'
depends = ['vim-polyglot']
hook_add = '''
  let g:htl_css_templates = 1
'''

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
  nnoremap <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'kg8m/vim-fzf-tjump'
merged = 0
hook_add = '''
  map g] <Plug>(fzf-tjump)
'''

[[plugins]]
repo = 'qpkorr/vim-renamer'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  let g:ackprg = 'ag --vimgrep'
'''

[[plugins]]
repo = 'joker1007/vim-ruby-heredoc-syntax'

[[plugins]]
repo = 'vim-scripts/moin.vim'

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
  set updatetime=100

  let g:signify_sign_add               = '+'
  let g:signify_sign_delete            = '-'
  let g:signify_sign_delete_first_line = '-'
  let g:signify_sign_change            = 'c'
'''

[[plugins]]
# osyo-manga/vim-preciousとの違い:
  # このプラグインはシンタックスファイルを読み込むだけ。
  # vim-preciousはfiletype自体を変更するのでfiletype特有の設定が有効になる。
repo = 'inkarkat/vim-SyntaxRange'
hook_add = '''
  source ~/.vim/plugins/vim-syntaxrange.rc.vim
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_exclude_filetypes = ['startify', 'help']
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=238
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=235
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_change_to_dir = 0
let g:startify_bookmarks = [ {'c': '~/.vimrc'}, {'d': '~/.vim/rc/dein.toml'} ]
'''

[[plugins]]
repo = 'pbrisbin/vim-mkdir'

[[plugins]]
repo     = 'Shougo/denite.nvim'
if       = '''has('python3')'''
depends  = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_post_source = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" Add custom menus
let s:menus = {}

let s:menus.my_commands = {
  \ 'description': 'My commands'
  \ }
let s:menus.my_commands.command_candidates = [
  \ ['Echo Filename', 'echo CurrentRelativePath()'],
  \ ['Open Denite menu', 'Denite menu'],
  \ ['Update Vim Plugins', 'call dein#update()'],
  \ ]

call denite#custom#var('menu', 'menus', s:menus)
'''
